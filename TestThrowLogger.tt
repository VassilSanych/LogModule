<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#
			var classFilePath = Host.ResolvePath("TestLogger.cs");
            var testLoggerLines = File.ReadAllLines(classFilePath);

			string assertMethod = null;
            bool needToReplace = false;

            foreach (var testLoggerLine in testLoggerLines)
            {
                var line = testLoggerLine;
                const string methodMarker = "public void ";
                int declPos = line.IndexOf(methodMarker, StringComparison.Ordinal);
                if (declPos != -1)
                {
					int startPos = declPos + methodMarker.Length;
                    var methodName = line.Substring(startPos, line.IndexOf('(', startPos) - startPos).Trim();
                    switch (methodName)
                    {
                        case "Debug":
                        case "Debug<T>":
                        case "Debug<TArgument>":
                        case "Debug<TArgument1, TArgument2>":
                        case "Debug<TArgument1, TArgument2, TArgument3>":
                        case "DebugException":
							assertMethod = "DebugAction";
                            needToReplace = true;
                            break;
                        case "Warn":
                        case "Warn<T>":
                        case "Warn<TArgument>":
                        case "Warn<TArgument1, TArgument2>":
                        case "Warn<TArgument1, TArgument2, TArgument3>":
                        case "WarnException":
							assertMethod = "WarnAction";
                            needToReplace = true;
                            break;
                        case "Error":
                        case "Error<T>":
                        case "Error<TArgument>":
                        case "Error<TArgument1, TArgument2>":
                        case "Error<TArgument1, TArgument2, TArgument3>":
                        case "ErrorException":
							assertMethod = "ErrorAction";
                            needToReplace = true;
                            break;
                        case "Fatal":
                        case "Fatal<T>":
                        case "Fatal<TArgument>":
                        case "Fatal<TArgument1, TArgument2>":
                        case "Fatal<TArgument1, TArgument2, TArgument3>":
                        case "FatalException":
							assertMethod = "FatalAction";
                            needToReplace = true;
                            break;
                        default:
                            needToReplace = false;
                            break;
                    }
                }
                else if (needToReplace && line.Contains("Console.WriteLine"))
                {
					needToReplace = false;
					line = line.Replace("Console.WriteLine", assertMethod);
                }
				else if (line.Contains("class TestLogger"))
					line = line.Replace("class TestLogger", "class TestThrowLogger");

                WriteLine(line); 
            }
#>